


=== Informações do Projeto ===

Estrutura de diretórios do projeto:

/home/gelber/local-git-projects/ctc-tech/ocs-inv_ansible-homolog
├── ansible.cfg
├── ansible.log
├── files
│   └── packages
│       ├── debian
│       │   └── Ocsinventory-Unix-Agent-2.6.0.tar.gz
│       ├── redhat
│       │   └── ocsinventory-agent-2.6.0-1.el6.ocs.x86_64.rpm
│       └── suse
├── generate_project_prompt.sh
├── inventory
│   ├── group_vars
│   │   ├── all
│   │   │   └── vault.yml
│   │   └── all.yml
│   ├── hosts.csv
│   └── inventory.py
├── playbook.yml
├── project_overview.txt
├── README.md
├── roles
│   └── ocs_inventory
│       ├── defaults
│       ├── tasks
│       │   ├── debian.yml
│       │   ├── main.yml
│       │   ├── redhat.yml
│       │   └── suse.yml
│       └── templates
│           ├── ocsinventory-agent.cfg.j2
│           └── run-ocs-agent.sh.j2
├── roolback.yml
├── tasks
│   └── diagnostico.yml
└── templates
    └── diagnostico_report.j2

15 directories, 21 files

Conteúdo dos arquivos selecionados:


=== roles/ocs_inventory/tasks/debian.yml ===

---
- name: Backup dos pacotes instalados (para rollback)
  shell: dpkg -l > {{ backup_dir }}/installed_packages.before
  when: enable_rollback | bool
  changed_when: false

- name: Instalar dependências necessárias
  apt:
    name:
      - dmidecode
      - perl
      - libmodule-install-perl
      - libxml-simple-perl
      - libcompress-zlib-perl
      - libnet-ip-perl
      - libwww-perl
      - libdigest-md5-perl
      - libdata-uuid-perl
      - curl
    state: present
    update_cache: yes
  register: deps_installed

- name: Verificar se o agente OCS já está instalado
  command: dpkg-query -W -f='${Status}' ocsinventory-agent
  register: ocs_installed
  failed_when: false
  changed_when: false

- block:
    - name: Criar diretório temporário para pacotes
      file:
        path: /tmp/ocs_packages
        state: directory
        mode: '0755'
      
    - name: Verificar se pacote local existe
      stat: 
        path: "{{ local_packages_path }}/debian/ocsinventory-agent.deb"
      register: local_pkg
      delegate_to: localhost
      
    - name: Copiar pacote local se disponível
      copy:
        src: "{{ local_packages_path }}/debian/ocsinventory-agent.deb"
        dest: "/tmp/ocs_packages/ocsinventory-agent.deb"
      when: use_local_packages and local_pkg.stat.exists
      
    - name: Baixar pacote OCS Inventory se não houver cópia local
      get_url:
        url: https://github.com/OCSInventory-NG/UnixAgent/releases/download/v2.10.0/Ocsinventory-Unix-Agent-2.10.0.tar.gz
        dest: "/tmp/ocs_packages/ocsinventory-agent.tar.gz"
      when: not (use_local_packages and local_pkg.stat.exists)
      
    - name: Extrair arquivos (se baixou da internet)
      unarchive:
        src: "/tmp/ocs_packages/ocsinventory-agent.tar.gz"
        dest: "/tmp/ocs_packages/"
        remote_src: yes
      when: not (use_local_packages and local_pkg.stat.exists)
      
    - name: Compilar e instalar (se baixou da internet)
      shell: |
        cd /tmp/ocs_packages/Ocsinventory-Unix-Agent-*
        perl Makefile.PL
        make
        make install
      args:
        executable: /bin/bash
      when: not (use_local_packages and local_pkg.stat.exists)
      
    - name: Instalar pacote (se local)
      apt: 
        deb: "/tmp/ocs_packages/ocsinventory-agent.deb"
      when: use_local_packages and local_pkg.stat.exists
  
    - name: Obter versão do pacote instalado
      shell: dpkg-query -W -f='${Version}' ocsinventory-agent
      register: package_version
      changed_when: false
  
  when: ocs_installed.rc != 0
=== roles/ocs_inventory/tasks/redhat.yml ===

---
- name: Backup dos pacotes instalados (para rollback)
  shell: rpm -qa > {{ backup_dir }}/installed_packages.before
  when: enable_rollback | bool
  changed_when: false

- name: Instalar dependências necessárias (RHEL/CentOS)
  yum:
    name:
      - dmidecode
      - perl
      - perl-XML-Simple
      - perl-Compress-Zlib
      - perl-Net-IP
      - perl-LWP-Protocol-https
      - perl-Digest-MD5
      - perl-Data-UUID
      - perl-Net-SNMP
      - curl
      - make
      - gcc
    state: present
  register: deps_installed

- name: Verificar se o agente OCS já está instalado
  command: rpm -q ocsinventory-agent
  register: ocs_installed
  failed_when: false
  changed_when: false

- block:
    - name: Criar diretório temporário para pacotes
      file:
        path: /tmp/ocs_packages
        state: directory
        mode: '0755'
    
    - name: Verificar se pacote local existe
      stat: 
        path: "{{ local_packages_path }}/redhat/ocsinventory-agent.rpm"
      register: local_pkg
      delegate_to: localhost
    
    - name: Copiar pacote local se disponível
      copy:
        src: "{{ local_packages_path }}/redhat/ocsinventory-agent.rpm"
        dest: "/tmp/ocs_packages/ocsinventory-agent.rpm"
      when: use_local_packages and local_pkg.stat.exists
    
    - name: Baixar pacote OCS Inventory se não houver cópia local
      get_url:
        url: https://github.com/OCSInventory-NG/UnixAgent/releases/download/v2.10.0/Ocsinventory-Unix-Agent-2.10.0.tar.gz
        dest: "/tmp/ocs_packages/ocsinventory-agent.tar.gz"
      when: not (use_local_packages and local_pkg.stat.exists)
    
    - name: Extrair arquivos (se baixou da internet)
      unarchive:
        src: "/tmp/ocs_packages/ocsinventory-agent.tar.gz"
        dest: "/tmp/ocs_packages/"
        remote_src: yes
      when: not (use_local_packages and local_pkg.stat.exists)
    
    - name: Compilar e instalar (se baixou da internet)
      shell: |
        cd /tmp/ocs_packages/Ocsinventory-Unix-Agent-*
        perl Makefile.PL
        make
        make install
      args:
        executable: /bin/bash
      when: not (use_local_packages and local_pkg.stat.exists)
    
    - name: Instalar pacote (se local)
      yum: 
        name: "/tmp/ocs_packages/ocsinventory-agent.rpm"
        state: present
      when: use_local_packages and local_pkg.stat.exists
  
    - name: Obter versão do pacote instalado
      shell: rpm -q --qf '%{VERSION}' ocsinventory-agent
      register: package_version
      changed_when: false
      failed_when: false
  
  when: ocs_installed.rc != 0
=== roles/ocs_inventory/tasks/main.yml ===

---
- name: Criar diretório de backup para rollback
  file:
    #path: "{{ backup_dir }}"
    path: /var/backups/ocs_agent_rollback/
    state: directory
    mode: '0755'
#  when: enable_rollback | bool
  
- name: Detectar a família da distribuição
  set_fact:
    is_debian: "{{ ansible_os_family == 'Debian' }}"
    is_redhat: "{{ ansible_os_family == 'RedHat' }}"
    is_suse: "{{ ansible_os_family == 'Suse' }}"

- name: Incluir tarefas específicas para Debian/Ubuntu
  include_tasks: debian.yml
  when: is_debian | bool

- name: Incluir tarefas específicas para RedHat/CentOS
  include_tasks: redhat.yml
  when: is_redhat | bool

- name: Incluir tarefas específicas para SUSE
  include_tasks: suse.yml
  when: is_suse | bool

- name: Criar diretório de configuração
  file:
    path: "/etc/ocsinventory/ocsinventory-agent.cfg.d"
    state: directory
    mode: '0755'

- name: Configurar OCS Inventory Agent
  template:
    src: ocsinventory-agent.cfg.j2
    dest: "/etc/ocsinventory/ocsinventory-agent.cfg.d/00-ocs-ansible.cfg"
    owner: root
    group: root
    mode: '0644'
  register: config_update

- name: Criar script para execução manual do agente
  template:
    src: run-ocs-agent.sh.j2
    dest: /usr/local/bin/run-ocs-agent.sh
    mode: '0755'

- name: Configurar cron para execução diária
  cron:
    name: "OCS Inventory Agent"
    hour: "{{ 23 | random(seed=inventory_hostname) }}"
    minute: "{{ 59 | random(seed=inventory_hostname) }}"
    job: "/usr/local/bin/run-ocs-agent.sh > /dev/null 2>&1"
    user: root

- name: Executar OCS Inventory pela primeira vez
  command: /usr/local/bin/run-ocs-agent.sh
  register: first_run
  failed_when: false
  changed_when: first_run.rc == 0

- name: Registrar status para verificação posterior
  set_fact:
    ocs_agent_installed: true
    ocs_agent_version: "{{ package_version.stdout if package_version is defined else 'unknown' }}"
=== inventory/group_vars/all.yml ===

---
# Configurações do Servidor OCS
ocs_server_url: "http://10.2.100.50/ocsinventory/"
ocs_server_protocol: "http"
ocs_server_host: "10.2.100.50"
ocs_server_port: "80"
ocs_server_path: "/ocsinventory"

# Configurações do Agente
ocs_agent_frequency: "24"
ocs_agent_logfile: "/var/log/ocsinventory-agent/ocsinventory-agent.log"
ocs_agent_loglevel: "info"
ocs_agent_tag: ""

# Pacotes locais (para máquinas sem acesso à internet)
use_local_packages: true
local_packages_path: "{{ playbook_dir }}/files/packages"

# Configuração de Proxy (se necessário)
http_proxy: ""
https_proxy: ""

# Configurações de Rollback
backup_dir: "/var/backups/ocs_agent_rollback"
enable_rollback: true

ansible_become_pass: "{{ ansible_sudo_pass }}"

=== inventory/inventory.py ===

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para gerar inventário Ansible a partir de hosts do Zabbix
Método: Arquivo de exportação manual
"""

import json
import sys
import os
import argparse
import csv

# Definição do arquivo de hosts (ajuste conforme necessário)
HOSTS_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'hosts.csv')

def parse_args():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(description='Inventário Ansible do Zabbix')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--list', action='store_true', help='Listar todos os grupos')
    group.add_argument('--host', help='Obter variáveis para host específico')
    return parser.parse_args()

def read_hosts_from_csv():
    """Ler hosts do arquivo CSV exportado do Zabbix"""
    hosts = {}
    groups = {'linux': {'hosts': []}}
    
    try:
        with open(HOSTS_FILE, 'r') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                hostname = row.get('host', '').strip()
                if not hostname:
                    continue
                
                # Adicionar host à lista
                hosts[hostname] = {
                    'ansible_host': row.get('ip', hostname).strip(),
                    'ansible_user': 'adm_far',
                    'ansible_become': True,
                    'ansible_become_method': 'sudo'
                }
                
                # Adicionar ao grupo linux
                groups['linux']['hosts'].append(hostname)
    except Exception as e:
        sys.stderr.write(f"Erro ao ler arquivo de hosts: {str(e)}\n")
        groups = {'linux': {'hosts': []}}
    
    return hosts, groups

def list_hosts():
    """Listar todos os hosts e grupos"""
    hosts, groups = read_hosts_from_csv()
    return groups

def get_host_vars(host):
    """Obter variáveis para um host específico"""
    hosts, _ = read_hosts_from_csv()
    return hosts.get(host, {})

def main():
    """Função principal"""
    args = parse_args()
    
    if args.list:
        print(json.dumps(list_hosts(), indent=2))
    elif args.host:
        print(json.dumps(get_host_vars(args.host), indent=2))

if __name__ == '__main__':
    main()
=== ansible.cfg ===

[defaults]
inventory = inventory/inventory.py
remote_user = adm_far
host_key_checking = False
retry_files_enabled = False
roles_path = ./roles
log_path = ./ansible.log
timeout = 30
gathering = smart

[privilege_escalation]
become = True
become_method = sudo
become_user = root
become_ask_pass = False

[ssh_connection]
pipelining = True
ssh_args = -o ControlMaster=auto -o ControlPersist=60s -o ConnectTimeout=20
=== playbook.yml ===

---
- name: Carregar variáveis globais
  hosts: all
  gather_facts: no
  tasks:
    - name: Incluir variáveis do grupo all
      include_vars:
        file: inventory/group_vars/all.yml

- name: Testar carregamento das variáveis
  hosts: all
  gather_facts: no
  tasks:
    - name: Exibir variáveis do grupo all
      debug:
        var: hostvars[inventory_hostname]

- name: Pre-flight checks
  hosts: all
  become: yes
  gather_facts: yes
  tags: [always, diagnose]
  tasks:
    - name: Include diagnóstico
      include_tasks: tasks/diagnostico.yml

- name: Instalar e configurar OCS Inventory Agent
  hosts: all
  become: yes
  gather_facts: yes
  roles:
    - ocs_inventory

- name: Verificar instalação
  hosts: all
  become: yes
  gather_facts: no
  tasks:
    - name: Verificar status do agente OCS
      shell: "ps aux | grep -v grep | grep ocsinventory-agent"
      register: ocs_status
      failed_when: false
      changed_when: false

    - name: Exibir status da instalação
      debug:
        msg: "OCS Inventory Agent instalado com sucesso em {{ inventory_hostname }}"
      when: ocs_status.rc == 0

    - name: Registrar hosts com falha
      set_fact:
        installation_failed: true
      when: ocs_status.rc != 0
      delegate_to: localhost
      delegate_facts: true

- hosts: all
  become: yes
  vars:
    backup_dir: "/var/backups/ocsinventory"
  roles:
    - ocs_inventory
